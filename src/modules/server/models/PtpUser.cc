/**
 *
 *  PtpUser.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "PtpUser.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::ptp_system;

const std::string PtpUser::Cols::_id = "id";
const std::string PtpUser::Cols::_account = "account";
const std::string PtpUser::Cols::_banned = "banned";
const std::string PtpUser::Cols::_groups = "groups";
const std::string PtpUser::primaryKeyName = "id";
const bool PtpUser::hasPrimaryKey = true;
const std::string PtpUser::tableName = "ptp_user";

const std::vector<typename PtpUser::MetaData> PtpUser::metaData_={
{"id","int32_t","int",4,1,1,1},
{"account","std::string","varchar(255)",255,0,0,1},
{"banned","int32_t","int",4,0,0,1},
{"groups","std::string","json",0,0,0,1}
};
const std::string &PtpUser::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
PtpUser::PtpUser(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["account"].isNull())
        {
            account_=std::make_shared<std::string>(r["account"].as<std::string>());
        }
        if(!r["banned"].isNull())
        {
            banned_=std::make_shared<int32_t>(r["banned"].as<int32_t>());
        }
        if(!r["groups"].isNull())
        {
            groups_=std::make_shared<std::string>(r["groups"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            account_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            banned_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            groups_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

PtpUser::PtpUser(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            account_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());

        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            banned_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            groups_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());

        }
    }
}

PtpUser::PtpUser(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("account"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["account"].isNull())
        {
            account_=std::make_shared<std::string>(pJson["account"].asString());
        }
    }
    if(pJson.isMember("banned"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["banned"].isNull())
        {
            banned_=std::make_shared<int32_t>((int32_t)pJson["banned"].asInt64());
        }
    }
    if(pJson.isMember("groups"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["groups"].isNull())
        {
            groups_=std::make_shared<std::string>(pJson["groups"].asString());
        }
    }
}

void PtpUser::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            account_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            banned_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            groups_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
}
                                                                    
void PtpUser::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("account"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["account"].isNull())
        {
            account_=std::make_shared<std::string>(pJson["account"].asString());
        }
    }
    if(pJson.isMember("banned"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["banned"].isNull())
        {
            banned_=std::make_shared<int32_t>((int32_t)pJson["banned"].asInt64());
        }
    }
    if(pJson.isMember("groups"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["groups"].isNull())
        {
            groups_=std::make_shared<std::string>(pJson["groups"].asString());
        }
    }
}

const int32_t &PtpUser::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtpUser::getId() const noexcept
{
    return id_;
}
void PtpUser::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}



const typename PtpUser::PrimaryKeyType & PtpUser::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &PtpUser::getValueOfAccount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(account_)
        return *account_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PtpUser::getAccount() const noexcept
{
    return account_;
}
void PtpUser::setAccount(const std::string &pAccount) noexcept
{
    account_ = std::make_shared<std::string>(pAccount);
    dirtyFlag_[1] = true;
}
void PtpUser::setAccount(std::string &&pAccount) noexcept
{
    account_ = std::make_shared<std::string>(std::move(pAccount));
    dirtyFlag_[1] = true;
}




const int32_t &PtpUser::getValueOfBanned() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(banned_)
        return *banned_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtpUser::getBanned() const noexcept
{
    return banned_;
}
void PtpUser::setBanned(const int32_t &pBanned) noexcept
{
    banned_ = std::make_shared<int32_t>(pBanned);
    dirtyFlag_[2] = true;
}




const std::string &PtpUser::getValueOfGroups() const noexcept
{
    const static std::string defaultValue = std::string();
    if(groups_)
        return *groups_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PtpUser::getGroups() const noexcept
{
    return groups_;
}
void PtpUser::setGroups(const std::string &pGroups) noexcept
{
    groups_ = std::make_shared<std::string>(pGroups);
    dirtyFlag_[3] = true;
}
void PtpUser::setGroups(std::string &&pGroups) noexcept
{
    groups_ = std::make_shared<std::string>(std::move(pGroups));
    dirtyFlag_[3] = true;
}




void PtpUser::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &PtpUser::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "account",
        "banned",
        "groups"
    };
    return inCols;
}

void PtpUser::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getAccount())
        {
            binder << getValueOfAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getBanned())
        {
            binder << getValueOfBanned();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getGroups())
        {
            binder << getValueOfGroups();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> PtpUser::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void PtpUser::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getAccount())
        {
            binder << getValueOfAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getBanned())
        {
            binder << getValueOfBanned();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getGroups())
        {
            binder << getValueOfGroups();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value PtpUser::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getAccount())
    {
        ret["account"]=getValueOfAccount();
    }
    else
    {
        ret["account"]=Json::Value();
    }
    if(getBanned())
    {
        ret["banned"]=getValueOfBanned();
    }
    else
    {
        ret["banned"]=Json::Value();
    }
    if(getGroups())
    {
        ret["groups"]=getValueOfGroups();
    }
    else
    {
        ret["groups"]=Json::Value();
    }
    return ret;
}

Json::Value PtpUser::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getAccount())
            {
                ret[pMasqueradingVector[1]]=getValueOfAccount();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getBanned())
            {
                ret[pMasqueradingVector[2]]=getValueOfBanned();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getGroups())
            {
                ret[pMasqueradingVector[3]]=getValueOfGroups();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getAccount())
    {
        ret["account"]=getValueOfAccount();
    }
    else
    {
        ret["account"]=Json::Value();
    }
    if(getBanned())
    {
        ret["banned"]=getValueOfBanned();
    }
    else
    {
        ret["banned"]=Json::Value();
    }
    if(getGroups())
    {
        ret["groups"]=getValueOfGroups();
    }
    else
    {
        ret["groups"]=Json::Value();
    }
    return ret;
}

bool PtpUser::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("account"))
    {
        if(!validJsonOfField(1, "account", pJson["account"], err, true))
            return false;
    }
    else
    {
        err="The account column cannot be null";
        return false;
    }
    if(pJson.isMember("banned"))
    {
        if(!validJsonOfField(2, "banned", pJson["banned"], err, true))
            return false;
    }
    if(pJson.isMember("groups"))
    {
        if(!validJsonOfField(3, "groups", pJson["groups"], err, true))
            return false;
    }
    else
    {
        err="The groups column cannot be null";
        return false;
    }
    return true;
}
bool PtpUser::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PtpUser::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("account"))
    {
        if(!validJsonOfField(1, "account", pJson["account"], err, false))
            return false;
    }
    if(pJson.isMember("banned"))
    {
        if(!validJsonOfField(2, "banned", pJson["banned"], err, false))
            return false;
    }
    if(pJson.isMember("groups"))
    {
        if(!validJsonOfField(3, "groups", pJson["groups"], err, false))
            return false;
    }
    return true;
}
bool PtpUser::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PtpUser::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson, 
                               std::string &err, 
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
