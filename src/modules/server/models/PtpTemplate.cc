/**
 *
 *  PtpTemplate.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "PtpTemplate.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::ptp_system;

const std::string PtpTemplate::Cols::_id = "id";
const std::string PtpTemplate::Cols::_course_id = "course_id";
const std::string PtpTemplate::Cols::_version = "version";
const std::string PtpTemplate::Cols::_file = "file";
const std::string PtpTemplate::Cols::_fields = "fields";
const std::string PtpTemplate::Cols::_type = "type";
const std::string PtpTemplate::primaryKeyName = "id";
const bool PtpTemplate::hasPrimaryKey = true;
const std::string PtpTemplate::tableName = "ptp_template";

const std::vector<typename PtpTemplate::MetaData> PtpTemplate::metaData_={
{"id","int32_t","int",4,1,1,1},
{"course_id","int32_t","int",4,0,0,1},
{"version","int32_t","int",4,0,0,1},
{"file","std::string","varchar(255)",255,0,0,1},
{"fields","std::string","json",0,0,0,1},
{"type","std::string","enum('excel','word')",0,0,0,1}
};
const std::string &PtpTemplate::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
PtpTemplate::PtpTemplate(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["course_id"].isNull())
        {
            courseId_=std::make_shared<int32_t>(r["course_id"].as<int32_t>());
        }
        if(!r["version"].isNull())
        {
            version_=std::make_shared<int32_t>(r["version"].as<int32_t>());
        }
        if(!r["file"].isNull())
        {
            file_=std::make_shared<std::string>(r["file"].as<std::string>());
        }
        if(!r["fields"].isNull())
        {
            fields_=std::make_shared<std::string>(r["fields"].as<std::string>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<std::string>(r["type"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            courseId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            version_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            file_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            fields_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            type_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

PtpTemplate::PtpTemplate(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            courseId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            version_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            file_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());

        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            fields_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());

        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());

        }
    }
}

PtpTemplate::PtpTemplate(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("course_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["course_id"].isNull())
        {
            courseId_=std::make_shared<int32_t>((int32_t)pJson["course_id"].asInt64());
        }
    }
    if(pJson.isMember("version"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["version"].isNull())
        {
            version_=std::make_shared<int32_t>((int32_t)pJson["version"].asInt64());
        }
    }
    if(pJson.isMember("file"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["file"].isNull())
        {
            file_=std::make_shared<std::string>(pJson["file"].asString());
        }
    }
    if(pJson.isMember("fields"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["fields"].isNull())
        {
            fields_=std::make_shared<std::string>(pJson["fields"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
}

void PtpTemplate::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            courseId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            version_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            file_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            fields_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}
                                                                    
void PtpTemplate::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("course_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["course_id"].isNull())
        {
            courseId_=std::make_shared<int32_t>((int32_t)pJson["course_id"].asInt64());
        }
    }
    if(pJson.isMember("version"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["version"].isNull())
        {
            version_=std::make_shared<int32_t>((int32_t)pJson["version"].asInt64());
        }
    }
    if(pJson.isMember("file"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["file"].isNull())
        {
            file_=std::make_shared<std::string>(pJson["file"].asString());
        }
    }
    if(pJson.isMember("fields"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["fields"].isNull())
        {
            fields_=std::make_shared<std::string>(pJson["fields"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
}

const int32_t &PtpTemplate::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtpTemplate::getId() const noexcept
{
    return id_;
}
void PtpTemplate::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}



const typename PtpTemplate::PrimaryKeyType & PtpTemplate::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int32_t &PtpTemplate::getValueOfCourseId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(courseId_)
        return *courseId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtpTemplate::getCourseId() const noexcept
{
    return courseId_;
}
void PtpTemplate::setCourseId(const int32_t &pCourseId) noexcept
{
    courseId_ = std::make_shared<int32_t>(pCourseId);
    dirtyFlag_[1] = true;
}




const int32_t &PtpTemplate::getValueOfVersion() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(version_)
        return *version_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtpTemplate::getVersion() const noexcept
{
    return version_;
}
void PtpTemplate::setVersion(const int32_t &pVersion) noexcept
{
    version_ = std::make_shared<int32_t>(pVersion);
    dirtyFlag_[2] = true;
}




const std::string &PtpTemplate::getValueOfFile() const noexcept
{
    const static std::string defaultValue = std::string();
    if(file_)
        return *file_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PtpTemplate::getFile() const noexcept
{
    return file_;
}
void PtpTemplate::setFile(const std::string &pFile) noexcept
{
    file_ = std::make_shared<std::string>(pFile);
    dirtyFlag_[3] = true;
}
void PtpTemplate::setFile(std::string &&pFile) noexcept
{
    file_ = std::make_shared<std::string>(std::move(pFile));
    dirtyFlag_[3] = true;
}




const std::string &PtpTemplate::getValueOfFields() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fields_)
        return *fields_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PtpTemplate::getFields() const noexcept
{
    return fields_;
}
void PtpTemplate::setFields(const std::string &pFields) noexcept
{
    fields_ = std::make_shared<std::string>(pFields);
    dirtyFlag_[4] = true;
}
void PtpTemplate::setFields(std::string &&pFields) noexcept
{
    fields_ = std::make_shared<std::string>(std::move(pFields));
    dirtyFlag_[4] = true;
}




const std::string &PtpTemplate::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PtpTemplate::getType() const noexcept
{
    return type_;
}
void PtpTemplate::setType(const std::string &pType) noexcept
{
    type_ = std::make_shared<std::string>(pType);
    dirtyFlag_[5] = true;
}
void PtpTemplate::setType(std::string &&pType) noexcept
{
    type_ = std::make_shared<std::string>(std::move(pType));
    dirtyFlag_[5] = true;
}




void PtpTemplate::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &PtpTemplate::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "course_id",
        "version",
        "file",
        "fields",
        "type"
    };
    return inCols;
}

void PtpTemplate::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCourseId())
        {
            binder << getValueOfCourseId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFile())
        {
            binder << getValueOfFile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFields())
        {
            binder << getValueOfFields();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> PtpTemplate::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void PtpTemplate::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getCourseId())
        {
            binder << getValueOfCourseId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFile())
        {
            binder << getValueOfFile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFields())
        {
            binder << getValueOfFields();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value PtpTemplate::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCourseId())
    {
        ret["course_id"]=getValueOfCourseId();
    }
    else
    {
        ret["course_id"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getFile())
    {
        ret["file"]=getValueOfFile();
    }
    else
    {
        ret["file"]=Json::Value();
    }
    if(getFields())
    {
        ret["fields"]=getValueOfFields();
    }
    else
    {
        ret["fields"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    return ret;
}

Json::Value PtpTemplate::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCourseId())
            {
                ret[pMasqueradingVector[1]]=getValueOfCourseId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getVersion())
            {
                ret[pMasqueradingVector[2]]=getValueOfVersion();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getFile())
            {
                ret[pMasqueradingVector[3]]=getValueOfFile();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getFields())
            {
                ret[pMasqueradingVector[4]]=getValueOfFields();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[5]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCourseId())
    {
        ret["course_id"]=getValueOfCourseId();
    }
    else
    {
        ret["course_id"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getFile())
    {
        ret["file"]=getValueOfFile();
    }
    else
    {
        ret["file"]=Json::Value();
    }
    if(getFields())
    {
        ret["fields"]=getValueOfFields();
    }
    else
    {
        ret["fields"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    return ret;
}

bool PtpTemplate::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("course_id"))
    {
        if(!validJsonOfField(1, "course_id", pJson["course_id"], err, true))
            return false;
    }
    else
    {
        err="The course_id column cannot be null";
        return false;
    }
    if(pJson.isMember("version"))
    {
        if(!validJsonOfField(2, "version", pJson["version"], err, true))
            return false;
    }
    if(pJson.isMember("file"))
    {
        if(!validJsonOfField(3, "file", pJson["file"], err, true))
            return false;
    }
    else
    {
        err="The file column cannot be null";
        return false;
    }
    if(pJson.isMember("fields"))
    {
        if(!validJsonOfField(4, "fields", pJson["fields"], err, true))
            return false;
    }
    else
    {
        err="The fields column cannot be null";
        return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(5, "type", pJson["type"], err, true))
            return false;
    }
    else
    {
        err="The type column cannot be null";
        return false;
    }
    return true;
}
bool PtpTemplate::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PtpTemplate::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("course_id"))
    {
        if(!validJsonOfField(1, "course_id", pJson["course_id"], err, false))
            return false;
    }
    if(pJson.isMember("version"))
    {
        if(!validJsonOfField(2, "version", pJson["version"], err, false))
            return false;
    }
    if(pJson.isMember("file"))
    {
        if(!validJsonOfField(3, "file", pJson["file"], err, false))
            return false;
    }
    if(pJson.isMember("fields"))
    {
        if(!validJsonOfField(4, "fields", pJson["fields"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(5, "type", pJson["type"], err, false))
            return false;
    }
    return true;
}
bool PtpTemplate::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PtpTemplate::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson, 
                                   std::string &err, 
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
