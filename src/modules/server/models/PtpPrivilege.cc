/**
 *
 *  PtpPrivilege.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "PtpPrivilege.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::ptp_system;

const std::string PtpPrivilege::Cols::_id = "id";
const std::string PtpPrivilege::Cols::_group_id = "group_id";
const std::string PtpPrivilege::Cols::_module_id = "module_id";
const std::string PtpPrivilege::Cols::_privilege = "privilege";
const std::string PtpPrivilege::primaryKeyName = "id";
const bool PtpPrivilege::hasPrimaryKey = true;
const std::string PtpPrivilege::tableName = "ptp_privilege";

const std::vector<typename PtpPrivilege::MetaData> PtpPrivilege::metaData_={
{"id","int32_t","int",4,1,1,1},
{"group_id","int32_t","int",4,0,0,1},
{"module_id","int32_t","int",4,0,0,1},
{"privilege","int32_t","int",4,0,0,1}
};
const std::string &PtpPrivilege::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
PtpPrivilege::PtpPrivilege(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["group_id"].isNull())
        {
            groupId_=std::make_shared<int32_t>(r["group_id"].as<int32_t>());
        }
        if(!r["module_id"].isNull())
        {
            moduleId_=std::make_shared<int32_t>(r["module_id"].as<int32_t>());
        }
        if(!r["privilege"].isNull())
        {
            privilege_=std::make_shared<int32_t>(r["privilege"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            groupId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            moduleId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            privilege_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

PtpPrivilege::PtpPrivilege(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            groupId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            moduleId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            privilege_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

PtpPrivilege::PtpPrivilege(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("group_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["group_id"].isNull())
        {
            groupId_=std::make_shared<int32_t>((int32_t)pJson["group_id"].asInt64());
        }
    }
    if(pJson.isMember("module_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["module_id"].isNull())
        {
            moduleId_=std::make_shared<int32_t>((int32_t)pJson["module_id"].asInt64());
        }
    }
    if(pJson.isMember("privilege"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["privilege"].isNull())
        {
            privilege_=std::make_shared<int32_t>((int32_t)pJson["privilege"].asInt64());
        }
    }
}

void PtpPrivilege::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            groupId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            moduleId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            privilege_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}
                                                                    
void PtpPrivilege::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("group_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["group_id"].isNull())
        {
            groupId_=std::make_shared<int32_t>((int32_t)pJson["group_id"].asInt64());
        }
    }
    if(pJson.isMember("module_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["module_id"].isNull())
        {
            moduleId_=std::make_shared<int32_t>((int32_t)pJson["module_id"].asInt64());
        }
    }
    if(pJson.isMember("privilege"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["privilege"].isNull())
        {
            privilege_=std::make_shared<int32_t>((int32_t)pJson["privilege"].asInt64());
        }
    }
}

const int32_t &PtpPrivilege::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtpPrivilege::getId() const noexcept
{
    return id_;
}
void PtpPrivilege::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}



const typename PtpPrivilege::PrimaryKeyType & PtpPrivilege::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int32_t &PtpPrivilege::getValueOfGroupId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(groupId_)
        return *groupId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtpPrivilege::getGroupId() const noexcept
{
    return groupId_;
}
void PtpPrivilege::setGroupId(const int32_t &pGroupId) noexcept
{
    groupId_ = std::make_shared<int32_t>(pGroupId);
    dirtyFlag_[1] = true;
}




const int32_t &PtpPrivilege::getValueOfModuleId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(moduleId_)
        return *moduleId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtpPrivilege::getModuleId() const noexcept
{
    return moduleId_;
}
void PtpPrivilege::setModuleId(const int32_t &pModuleId) noexcept
{
    moduleId_ = std::make_shared<int32_t>(pModuleId);
    dirtyFlag_[2] = true;
}




const int32_t &PtpPrivilege::getValueOfPrivilege() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(privilege_)
        return *privilege_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PtpPrivilege::getPrivilege() const noexcept
{
    return privilege_;
}
void PtpPrivilege::setPrivilege(const int32_t &pPrivilege) noexcept
{
    privilege_ = std::make_shared<int32_t>(pPrivilege);
    dirtyFlag_[3] = true;
}




void PtpPrivilege::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &PtpPrivilege::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "group_id",
        "module_id",
        "privilege"
    };
    return inCols;
}

void PtpPrivilege::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getGroupId())
        {
            binder << getValueOfGroupId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getModuleId())
        {
            binder << getValueOfModuleId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPrivilege())
        {
            binder << getValueOfPrivilege();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> PtpPrivilege::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void PtpPrivilege::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getGroupId())
        {
            binder << getValueOfGroupId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getModuleId())
        {
            binder << getValueOfModuleId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPrivilege())
        {
            binder << getValueOfPrivilege();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value PtpPrivilege::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getGroupId())
    {
        ret["group_id"]=getValueOfGroupId();
    }
    else
    {
        ret["group_id"]=Json::Value();
    }
    if(getModuleId())
    {
        ret["module_id"]=getValueOfModuleId();
    }
    else
    {
        ret["module_id"]=Json::Value();
    }
    if(getPrivilege())
    {
        ret["privilege"]=getValueOfPrivilege();
    }
    else
    {
        ret["privilege"]=Json::Value();
    }
    return ret;
}

Json::Value PtpPrivilege::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getGroupId())
            {
                ret[pMasqueradingVector[1]]=getValueOfGroupId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getModuleId())
            {
                ret[pMasqueradingVector[2]]=getValueOfModuleId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getPrivilege())
            {
                ret[pMasqueradingVector[3]]=getValueOfPrivilege();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getGroupId())
    {
        ret["group_id"]=getValueOfGroupId();
    }
    else
    {
        ret["group_id"]=Json::Value();
    }
    if(getModuleId())
    {
        ret["module_id"]=getValueOfModuleId();
    }
    else
    {
        ret["module_id"]=Json::Value();
    }
    if(getPrivilege())
    {
        ret["privilege"]=getValueOfPrivilege();
    }
    else
    {
        ret["privilege"]=Json::Value();
    }
    return ret;
}

bool PtpPrivilege::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("group_id"))
    {
        if(!validJsonOfField(1, "group_id", pJson["group_id"], err, true))
            return false;
    }
    else
    {
        err="The group_id column cannot be null";
        return false;
    }
    if(pJson.isMember("module_id"))
    {
        if(!validJsonOfField(2, "module_id", pJson["module_id"], err, true))
            return false;
    }
    else
    {
        err="The module_id column cannot be null";
        return false;
    }
    if(pJson.isMember("privilege"))
    {
        if(!validJsonOfField(3, "privilege", pJson["privilege"], err, true))
            return false;
    }
    return true;
}
bool PtpPrivilege::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PtpPrivilege::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("group_id"))
    {
        if(!validJsonOfField(1, "group_id", pJson["group_id"], err, false))
            return false;
    }
    if(pJson.isMember("module_id"))
    {
        if(!validJsonOfField(2, "module_id", pJson["module_id"], err, false))
            return false;
    }
    if(pJson.isMember("privilege"))
    {
        if(!validJsonOfField(3, "privilege", pJson["privilege"], err, false))
            return false;
    }
    return true;
}
bool PtpPrivilege::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PtpPrivilege::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson, 
                                    std::string &err, 
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
